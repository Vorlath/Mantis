# This workflow executes several linters on changed files based on languages used in your code base whenever
# you push a code or open a pull request.
#
# You can adjust the behavior by modifying this file.
# For more information, see:
# https://github.com/github/super-linter
name: CI for PRs

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    paths:
     - 'src/**'

jobs: 
  Linter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Lint
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: "main"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_CSHARP: true
          FIX_CSHARP: true

      # Step 4: Commit the changes if Super Linter applied any fixes
      - name: Commit and push changes if fixes were applied
        id: commit
        run: |
          # Check if any changes were made by Super Linter
          git diff --exit-code || echo "Changes found, committing..."
          
          # If there are changes, commit them
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Apply auto-fix for C# code with Super Linter"

      # Step 5: Push changes to the PR branch if fixes were applied
      - name: Push changes to the PR branch
        if: steps.commit.outcome == 'success'  # Only push if there were commits
        run: |
          git push origin HEAD:${{ github.head_ref }}
          
      # Step 6: Comment on the PR about the fixes applied (optional)
      - name: Comment on PR with fix status
        uses: actions/github-script@v6
        with:
          script: |
            const prStatus = "${{ steps.commit.outcome }}";
            let commentBody = prStatus === 'success' 
              ? 'The C# code has been automatically fixed using Super Linter.'
              : 'No formatting changes were made to the code.';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
